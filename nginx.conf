# Nginx configuration for AviationWX
# Note: This file is mounted as /etc/nginx/conf.d/default.conf
# HTTP-level directives (upstream, proxy_cache_path, limit_req_zone) 
# cannot be placed here as this file is treated as a server block.
# Rate limiting is handled by PHP application-level rate limiting.

# Redirect all HTTP to HTTPS
server {
    listen 80;
    server_name aviationwx.org *.aviationwx.org;
    return 301 https://$host$request_uri;
}

# HTTPS server
server {
    listen 443 ssl;
    http2 on;
    server_name aviationwx.org *.aviationwx.org;

    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;

    # Handle wildcard subdomains (any ICAO code)
    # Examples: kspb.aviationwx.org, kxxx.aviationwx.org
    # Works with ANY subdomain without creating them individually!

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; img-src 'self' data: https:; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; connect-src 'self'; frame-ancestors 'self'; base-uri 'self'; form-action 'self';" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), accelerometer=(), fullscreen=(self), picture-in-picture=()" always;

    # Rate limiting is handled by PHP application-level rate limiting
    # (Nginx-level rate limiting requires http{} context, not available in conf.d)

    # Unified logging - write to same directory as application logs
    # Access logs written with [nginx-access] prefix for filtering
    access_log /var/log/aviationwx/app.log combined;
    error_log /var/log/aviationwx/app.log warn;

    # Block known malicious user agents (Shellshock, etc.)
    if ($http_user_agent ~* "\(\)\s*\{\s*:\s*;\s*\};") {
        return 403;
    }
    
    # Block common exploit patterns
    if ($http_user_agent ~* "(bash|wget|curl).*sh|/bin/bash|busybox") {
        return 403;
    }
    
    # Define upstream inline (since we can't use http{} level upstream)
    location / {
        # Rate limiting handled by PHP application-level rate limiting
        proxy_pass http://web:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts for long-running requests (webcam fetching)
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Weather API (no proxy cache)
    location ~ ^/weather\.php$ {
        # Rate limiting handled by PHP application-level rate limiting
        proxy_pass http://web:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # API responses: tight referrer policy
        add_header Referrer-Policy "same-origin" always;
    }

    # Webcam API
    location ~ ^/webcam\.php$ {
        # Rate limiting handled by PHP application-level rate limiting
        
        # Preserve Content-Type header from PHP backend (critical for images)
        # Explicitly ensure Content-Type is passed from upstream
        proxy_pass_header     Content-Type;
        
        # Disable compression for image responses (prevents corruption)
        # Remove Accept-Encoding so backend doesn't compress images
        proxy_set_header      Accept-Encoding "";
        
        # Don't allow Nginx to set default Content-Type - use upstream header
        # Content-Type from PHP must be preserved exactly as sent

        proxy_pass http://web:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Don't apply security headers that override Content-Type
        # Content-Type from PHP must be preserved for images
    }

    # Static files (set client cache headers with version-based cache busting)
    # HTML and JS files have shorter cache to allow updates
    location ~* \.(jpg|jpeg|png|gif|ico)$ {
        proxy_pass http://web:80;
        expires 1h;
        add_header Cache-Control "public, max-age=3600";
    }
    
    # CSS and JS files - shorter cache for easier updates
    location ~* \.(css|js)$ {
        proxy_pass http://web:80;
        expires 15m;
        add_header Cache-Control "public, max-age=900, must-revalidate";
    }
    
    # HTML/PHP files - no cache to ensure updates are immediate
    location ~* \.(html|php)$ {
        proxy_pass http://web:80;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Deny access to sensitive files
    location ~ /airports\.json$ {
        deny all;
        return 404;
    }
}

